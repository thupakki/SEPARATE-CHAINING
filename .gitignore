#include <iostream>
#include <string>
#include <cstring>
#include <cstdlib>  // to generate random numbers
#include <ctime>   

using namespace std;

class linklist 
{
  int c;
	 struct node 
         {
		public:
		       string info; 
                       node *link;
	 } *p;
  public:
	  linklist();
	  void insert(string &str);
	  void del(string &str);
	  void display();
	  ~linklist();
};


linklist::linklist() 
{
	p = NULL;
	c = 0;
}



void linklist::insert(string &str) 
{
	node *q, *t;
	if(p==NULL) 
        {
		p = new node;
		p->info = str;
		p->link = NULL;
		c += 1;
	} 
        else 
        {
		q = p;
		while(q->link != NULL) 
                {
			q = q->link;
		}
		t = new node;
		t->info = str;
		t->link = NULL;
		q->link = t;
		c += 1;
	}
}



void linklist::del(string &str) 
{
	node *q, *r;
	q = p;
	if(q->info == str) 
        {
		p = q->link;
		delete q;
		c -= 1;
		return;
	}
	r = q;
	while(q != NULL) 
        {
		if(q->info == str) 
                {
			r->link = q->link;
			delete q;
			c -= 1;
			return;
		}
		r = q;
		q = q->link;
	}
	cout<<"Element "<<str<<" not found"<<endl;
}



void linklist::display()
{
	node *q;
	int i;
	for(q = p, i = 0; q != NULL, i < c; q = q->link, i++)
        {
          cout<<"\t"<<i<<": "<<q->info<<endl;
	}
}



linklist::~linklist() 
{
	node *q;
	if(p == NULL)
        {
          return;
	}
	while(p != NULL) 
        {
		q = p->link;
		delete p;
		p = q;
	}
}



class hashing
{
	 linklist *bucket; 
	 int size; 
	 int num_ele; 
 public:
	hashing(int table_size);
	int hash_str(const char *str); 
	void add(string &str); 
	void remove(string &str); 
	void output(); 
	~hashing(); 
};



hashing::hashing(int table_size)      //a constructor to allocate bucket array
{
	size = table_size; 
	int i;
	bucket = new linklist[size];
	num_ele = 0;
}



hashing::~hashing()    //a destructor to delete bucket array's allocated memory
{
	if(bucket)
        { 
		delete[] bucket; 
	}
}



void hashing::add(string &str)    // this function adds a string to hash table
{
	int hashed = hash(str.c_str()); 
	bucket[hashed].insert(str); 
	num_ele++; 
}




void hashing::remove(string &str)      //this function removes a string from hash table
{
	int hashed = hash_str(str.c_str()); 
	bucket[hashed].del(str); 
	num_ele--; 
}



void hashing::output()   //this function prints the whole hash table 
{
	int r;
        cout<<"Number of elements in table:"<<num_ele<<endl;
        for(r=0;i<size;i++) 
        {
	  cout<<"Bucket["<<r<<"] :"<<endl;
	  bucket[r].display(); 
        }
}



int hashing::hash_str(const char *str)   // hash function which hashes a string and returns an integer
{
	unsigned long hash = 0;
	int i=0;
	while(i <= strlen(str)) 
        {
		hash = hash + (hash<<5) + (unsigned long)(str[i]); 
		i++;
	}
	return (hash%size); 
}



int main() 
{
	hashing z(20);     
	srand(time(NULL));    //generate seed for random number creation 
	int i, j, random;
	string stng; 
	for(i=0; i<50; i++)  //generate 50 records of strings to add to hash table
        { 
	   stng = ""; 
           for(j=0;j<30;j++)   //each string has 20 random characters
           {
	      random = rand() % 30 + 70; //generates a random number between 70 and 99
	      stng += (char)random; 
	   }
		z.add(stng);  //add the created random string with 30 characters
	}
	z.output(); 
	return 0;
}
